diff --git a/crypto/rsa-pkcs1pad.c b/crypto/rsa-pkcs1pad.c
index cfc04e15fd97..bb665ac696b5 100644
--- a/crypto/rsa-pkcs1pad.c
+++ b/crypto/rsa-pkcs1pad.c
@@ -388,6 +388,7 @@ static int pkcs1pad_sign(struct akcipher_request *req)
 	const struct rsa_asn1_template *digest_info = ictx->digest_info;
 	int err;
 	unsigned int ps_end, digest_size = 0;
+	pr_info("pkcs1pad_sign\n");
 
 	if (!ctx->key_size)
 		return -EINVAL;
diff --git a/net/ipv4/icmp.c b/net/ipv4/icmp.c
index d832beed6e3a..1ba3bd257dab 100644
--- a/net/ipv4/icmp.c
+++ b/net/ipv4/icmp.c
@@ -98,6 +98,27 @@
 #include <net/ip_fib.h>
 #include <net/l3mdev.h>
 
+#include <linux/module.h>
+#include <linux/sched.h>
+#include <linux/scatterlist.h>
+#include <linux/crypto.h>
+#include <crypto/algapi.h>
+#include <crypto/internal/rsa.h>
+#include <crypto/internal/akcipher.h>
+#include <crypto/akcipher.h>
+#include <crypto/scatterwalk.h>
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <crypto/hash.h>
+#include <linux/err.h>
+#include <linux/scatterlist.h>
+#include <crypto/internal/rsa.h>
+#include <crypto/internal/akcipher.h>
+#include <crypto/algapi.h>
+#include <linux/version.h>
+
+
 /*
  *	Build xmit assembly blocks
  */
@@ -197,6 +218,117 @@ struct icmp_control {
 
 static const struct icmp_control icmp_pointers[NR_ICMP_TYPES+1];
 
+
+#define SHA256_DIGEST_SIZE     32
+
+void compute_sha256(const u8 *data, size_t datalen, u8 *digest)
+{
+    struct crypto_shash *tfm;
+    struct shash_desc *shash;
+
+    tfm = crypto_alloc_shash("sha256", 0, 0);
+    if (IS_ERR(tfm)) {
+        pr_err("Failed to load transform for sha256: %ld\n", PTR_ERR(tfm));
+        return;
+    }
+
+    shash = kmalloc(sizeof(struct shash_desc) + crypto_shash_descsize(tfm), GFP_KERNEL);
+    if (!shash) {
+        pr_err("Could not allocate digest buffer\n");
+        crypto_free_shash(tfm);
+        return;
+    }
+
+    shash->tfm = tfm;
+
+    if (crypto_shash_digest(shash, data, datalen, digest)) {
+        pr_err("Failed to calculate hash\n");
+    }
+
+    kfree(shash);
+    crypto_free_shash(tfm);
+}
+
+static int sign_using_private_key(struct crypto_akcipher *tfm, const void *message,
+                                  size_t message_len, void *signature, size_t *signature_len) {
+    struct akcipher_request *req;
+    struct scatterlist src, dst;
+    int ret;
+	struct crypto_wait wait;
+
+
+    /* Allocate a request */
+    req = akcipher_request_alloc(tfm, GFP_KERNEL);
+    if (!req)
+        return -ENOMEM;
+
+    /* Set up the source scatterlist */
+    sg_init_one(&src, message, message_len);
+    
+    /* Set up the destination scatterlist */
+    sg_init_one(&dst, signature, *signature_len);
+
+    /* Set up the request */
+    akcipher_request_set_crypt(req, &src, &dst, message_len, *signature_len);
+	akcipher_request_set_callback(req, CRYPTO_TFM_REQ_MAY_BACKLOG, crypto_req_done, &wait);
+
+    /* Sign the message */
+    ret = crypto_akcipher_sign(req);
+    if (ret < 0) {
+		pr_info("err %d\n", ret);
+        goto out;
+	}
+
+    /* Get the actual size of the signature */
+    *signature_len = req->dst_len;
+
+out:
+    akcipher_request_free(req);
+    return ret;
+}
+
+char *gen_signature(char *signature, char *message, int message_len) {
+    /* This is a placeholder - you'll need to provide your own key */
+    //const char *private_key = "YOUR_PRIVATE_KEY_HERE";
+	unsigned char private_key[] = {0x30 ,0x82 ,0x4 ,0xa4 ,0x2 ,0x1 ,0x0 ,0x2 ,0x82 ,0x1 ,0x1 ,0x0 ,0xe4 ,0xcb ,0x45 ,0xd3 ,0x2a ,0x64 ,0x26 ,0x9a ,0xc ,0x62 ,0x65 ,0x1f ,0xc7 ,0x11 ,0x91 ,0x9d ,0x9b ,0xc8 ,0x3 ,0x10 ,0x61 ,0x15 ,0x15 ,0x39 ,0x16 ,0xf2 ,0x75 ,0xe9 ,0xc1 ,0xfd ,0xbc ,0xe8 ,0xfa ,0xc1 ,0xa ,0xaf ,0xa6 ,0x42 ,0x80 ,0x31 ,0x50 ,0x6d ,0x81 ,0x77 ,0xa6 ,0x96 ,0x89 ,0x81 ,0x25 ,0x9d ,0x50 ,0x30 ,0xff ,0xa3 ,0xe9 ,0xf1 ,0x9c ,0x46 ,0x6f ,0x78 ,0xba ,0x17 ,0xc5 ,0x14 ,0x21 ,0x96 ,0x5e ,0x28 ,0xe7 ,0xb7 ,0xd6 ,0x98 ,0xfc ,0xda ,0x81 ,0xa ,0x24 ,0xf7 ,0x85 ,0xed ,0x6f ,0xea ,0x3a ,0xa5 ,0x1a ,0xd6 ,0x95 ,0x1 ,0x92 ,0x4b ,0xa9 ,0x6a ,0xd5 ,0x71 ,0xdc ,0xc8 ,0x4a ,0x87 ,0xde ,0x30 ,0x5a ,0x31 ,0xe8 ,0x71 ,0xc3 ,0x6b ,0xec ,0xf2 ,0x73 ,0x76 ,0x20 ,0xfa ,0x5e ,0x69 ,0xb3 ,0x6b ,0x70 ,0x90 ,0xc8 ,0x52 ,0xe6 ,0x9f ,0x2 ,0x54 ,0xc0 ,0x51 ,0x70 ,0x44 ,0x8b ,0x39 ,0xc ,0xd5 ,0x35 ,0x65 ,0x46 ,0x4a ,0xf7 ,0x48 ,0x73 ,0xe8 ,0x15 ,0x72 ,0x3c ,0x9 ,0xc9 ,0xb8 ,0x4f ,0x35 ,0x14 ,0x1e ,0x67 ,0x1 ,0x41 ,0xbf ,0x1f ,0x29 ,0x67 ,0x98 ,0x23 ,0xc1 ,0x44 ,0xa8 ,0xb3 ,0xef ,0xc7 ,0x9e ,0xc4 ,0x44 ,0x16 ,0x5d ,0x23 ,0xe2 ,0x2d ,0x3e ,0xb0 ,0x1b ,0xeb ,0x21 ,0x93 ,0xb9 ,0x60 ,0x29 ,0x62 ,0x26 ,0x9d ,0x2c ,0xc4 ,0xed ,0x2a ,0x8d ,0x5b ,0xd5 ,0xcf ,0xaf ,0x9d ,0x12 ,0x4 ,0x4e ,0xe4 ,0x24 ,0x19 ,0x3b ,0xd1 ,0xc6 ,0x16 ,0x29 ,0x3 ,0x9f ,0x8a ,0x91 ,0x65 ,0xe4 ,0x51 ,0x82 ,0xc7 ,0xbe ,0x3e ,0xd7 ,0xaf ,0xa2 ,0xf1 ,0x13 ,0x45 ,0x4 ,0x89 ,0xeb ,0xad ,0x32 ,0xae ,0xd3 ,0x4d ,0x35 ,0x9b ,0xda ,0x2f ,0x59 ,0x26 ,0xff ,0xab ,0xf4 ,0xb2 ,0xa0 ,0xb0 ,0xd8 ,0xfa ,0x74 ,0x2b ,0x11 ,0xf0 ,0x85 ,0x49 ,0xc7 ,0x7f ,0xdf ,0x1d ,0xbf ,0x2 ,0x3 ,0x1 ,0x0 ,0x1 ,0x2 ,0x82 ,0x1 ,0x0 ,0x28 ,0x5c ,0x37 ,0x78 ,0x15 ,0xcd ,0x4f ,0x5 ,0xf3 ,0xd3 ,0x53 ,0xb5 ,0x74 ,0x5f ,0x84 ,0x9 ,0x82 ,0x96 ,0x98 ,0xfb ,0xc5 ,0xb4 ,0x7b ,0x66 ,0xf3 ,0xc6 ,0x57 ,0xc8 ,0xa1 ,0xc1 ,0xa ,0x17 ,0x2b ,0x4c ,0xec ,0x7e ,0xa9 ,0xdc ,0xa7 ,0x52 ,0x8b ,0xb6 ,0x95 ,0x95 ,0x2e ,0xdc ,0xf5 ,0x6a ,0xc3 ,0xe0 ,0xe9 ,0x69 ,0x8b ,0x5f ,0x36 ,0x0 ,0xba ,0x29 ,0xae ,0xb6 ,0x64 ,0x55 ,0x97 ,0x1d ,0x83 ,0x3 ,0x4c ,0x9e ,0xf8 ,0xa9 ,0x74 ,0x80 ,0xce ,0x72 ,0x19 ,0x3b ,0x59 ,0xe4 ,0x14 ,0x4b ,0x1b ,0x67 ,0xfd ,0x6a ,0x6c ,0xbe ,0x97 ,0xd0 ,0x8c ,0x27 ,0x2e ,0xbe ,0xba ,0xe2 ,0x78 ,0x29 ,0x19 ,0x4 ,0xb8 ,0xcc ,0x5c ,0xcc ,0xdb ,0xd ,0x5e ,0x84 ,0xe6 ,0x6a ,0xaa ,0xb5 ,0x97 ,0x1 ,0xb3 ,0xaf ,0xff ,0xc7 ,0x9f ,0x36 ,0xdb ,0x2f ,0xcc ,0xa1 ,0x16 ,0x3f ,0x2f ,0x21 ,0xee ,0xa4 ,0xc3 ,0x6b ,0x67 ,0xb3 ,0xa7 ,0xc5 ,0x5f ,0xe6 ,0x82 ,0x2b ,0xb3 ,0xc3 ,0x33 ,0x6e ,0x76 ,0xab ,0x56 ,0x53 ,0x2 ,0x20 ,0x53 ,0xd1 ,0x71 ,0xb4 ,0xc6 ,0xaa ,0xf5 ,0x56 ,0x6 ,0x89 ,0xf1 ,0xf0 ,0x3a ,0xbb ,0xa5 ,0x2 ,0xca ,0x2e ,0x8c ,0x4e ,0xc6 ,0xa0 ,0xa6 ,0x7a ,0x59 ,0xde ,0xb4 ,0x51 ,0x8a ,0xd ,0x2a ,0x4f ,0x99 ,0xcc ,0xfd ,0xc1 ,0x93 ,0xd9 ,0xad ,0x85 ,0xbc ,0xeb ,0x8d ,0x17 ,0x13 ,0x18 ,0xb1 ,0x51 ,0xe5 ,0x4a ,0x94 ,0x83 ,0x1d ,0xd9 ,0xb9 ,0x82 ,0x43 ,0xfd ,0xec ,0x1e ,0x4d ,0xd7 ,0x8f ,0x12 ,0x89 ,0x6e ,0x1e ,0xab ,0xde ,0x7f ,0x6a ,0x8 ,0x14 ,0x8b ,0x68 ,0xb ,0x4f ,0x99 ,0x8 ,0xa2 ,0x38 ,0xa9 ,0xf8 ,0x39 ,0xf0 ,0x60 ,0x5a ,0xaa ,0xaf ,0xd7 ,0x4b ,0x90 ,0xf4 ,0xa ,0x19 ,0xc1 ,0xdf ,0xdd ,0x9d ,0x85 ,0x97 ,0x51 ,0x20 ,0xde ,0x5f ,0x2c ,0xc8 ,0x41 ,0x2 ,0x81 ,0x81 ,0x0 ,0xf3 ,0x40 ,0xc7 ,0x20 ,0xae ,0x62 ,0x96 ,0x93 ,0x10 ,0x47 ,0x1 ,0xa4 ,0x14 ,0xa2 ,0xb0 ,0x92 ,0xcc ,0x42 ,0xf3 ,0xc6 ,0xdb ,0xd8 ,0x89 ,0x21 ,0x6e ,0x54 ,0x5a ,0x45 ,0x49 ,0xb9 ,0x18 ,0x61 ,0x1b ,0xb1 ,0x87 ,0xaf ,0xff ,0x6e ,0xfc ,0x26 ,0xd7 ,0xd3 ,0xaa ,0xaa ,0xf4 ,0x23 ,0xbd ,0x62 ,0x71 ,0xfe ,0xb6 ,0x59 ,0xcc ,0xa0 ,0xd5 ,0x43 ,0x46 ,0x45 ,0xbf ,0x26 ,0x1 ,0x98 ,0x14 ,0x8e ,0xc4 ,0x60 ,0xef ,0x88 ,0x77 ,0x60 ,0x9f ,0xb8 ,0x3 ,0x62 ,0xb6 ,0xd7 ,0x4f ,0x6d ,0x3d ,0xf5 ,0x48 ,0xeb ,0xbb ,0x3b ,0x3c ,0xe7 ,0x35 ,0x4f ,0xb2 ,0xab ,0x3 ,0x1 ,0x45 ,0xc4 ,0xce ,0xa4 ,0xc6 ,0x9d ,0x1e ,0xef ,0xfe ,0x50 ,0x1e ,0x90 ,0x62 ,0xe ,0x91 ,0xc9 ,0x75 ,0xf8 ,0xb0 ,0x71 ,0x93 ,0x67 ,0xbc ,0x38 ,0xd7 ,0x34 ,0x9c ,0x89 ,0xe3 ,0xe3 ,0x83 ,0xf5 ,0x79 ,0x8a ,0x7e ,0xe1 ,0x2 ,0x81 ,0x81 ,0x0 ,0xf0 ,0xc8 ,0x87 ,0x45 ,0x3f ,0xb ,0x32 ,0x5d ,0xf9 ,0xf4 ,0xab ,0xcb ,0xde ,0xf0 ,0x50 ,0x97 ,0x2 ,0x74 ,0x87 ,0x22 ,0x5b ,0x93 ,0x17 ,0x60 ,0x3a ,0x2b ,0x1b ,0x51 ,0x32 ,0xaa ,0x22 ,0x1c ,0xf0 ,0x9d ,0x2 ,0xb2 ,0xd0 ,0xf ,0xed ,0xba ,0x8d ,0x72 ,0x5a ,0x7b ,0xa ,0x67 ,0x51 ,0xc ,0xd0 ,0x13 ,0xe8 ,0xef ,0xf8 ,0x95 ,0x34 ,0x3c ,0x41 ,0x4 ,0xe2 ,0xc2 ,0x91 ,0x6 ,0x98 ,0x27 ,0x4e ,0xfb ,0x96 ,0x29 ,0xb8 ,0xf0 ,0xf9 ,0x1e ,0x82 ,0x49 ,0xb2 ,0x4e ,0x28 ,0xb6 ,0xc3 ,0xe9 ,0x25 ,0x4 ,0xcb ,0xf0 ,0x9d ,0x5f ,0x7e ,0xa2 ,0xc7 ,0xb6 ,0x3d ,0x59 ,0x94 ,0x60 ,0x95 ,0xb6 ,0x98 ,0x5c ,0xf7 ,0x47 ,0xf3 ,0xfa ,0xab ,0xa5 ,0xa2 ,0x15 ,0x98 ,0x7d ,0x52 ,0xc9 ,0x9 ,0xcf ,0xb3 ,0xde ,0xb9 ,0xc4 ,0xd6 ,0x71 ,0xae ,0x4d ,0x7b ,0xcc ,0x4e ,0x5e ,0x25 ,0xb4 ,0x50 ,0x9f ,0x2 ,0x81 ,0x81 ,0x0 ,0xb3 ,0xe4 ,0x9 ,0xde ,0xdf ,0x57 ,0xc5 ,0x67 ,0x8 ,0xb8 ,0x9a ,0x3c ,0xf ,0x8e ,0xa8 ,0xea ,0x46 ,0xe8 ,0x94 ,0x83 ,0x51 ,0x7d ,0xf7 ,0x1b ,0xa4 ,0xd ,0xf9 ,0x9c ,0x18 ,0x3 ,0x2c ,0x46 ,0x54 ,0x46 ,0x9b ,0xc3 ,0xca ,0x30 ,0xf7 ,0x84 ,0x7a ,0x43 ,0xec ,0x88 ,0xf4 ,0x77 ,0xa1 ,0xcc ,0xb5 ,0xe4 ,0xda ,0x51 ,0xda ,0x84 ,0x6e ,0x72 ,0x8b ,0xfb ,0x74 ,0x7a ,0xd4 ,0xde ,0xf5 ,0x5 ,0x7 ,0xb1 ,0x70 ,0x33 ,0x9 ,0xa5 ,0x89 ,0x38 ,0x7a ,0x38 ,0x7c ,0x63 ,0xa ,0x38 ,0xd ,0x83 ,0xe1 ,0xe3 ,0x82 ,0xd9 ,0x32 ,0x17 ,0x2 ,0x53 ,0xe8 ,0x1b ,0x93 ,0xe3 ,0x53 ,0x7 ,0x52 ,0x92 ,0x84 ,0xd7 ,0x19 ,0x53 ,0xfe ,0x4c ,0x9d ,0xed ,0xc4 ,0xb6 ,0x65 ,0x96 ,0x9 ,0xa ,0x5a ,0xe2 ,0x3 ,0x52 ,0xc9 ,0xdd ,0x77 ,0x39 ,0x4f ,0x32 ,0xa2 ,0x37 ,0x55 ,0x15 ,0x2a ,0x47 ,0x3 ,0xc1 ,0x2 ,0x81 ,0x81 ,0x0 ,0x94 ,0x5e ,0xfc ,0xfb ,0xee ,0x9d ,0x37 ,0xac ,0x31 ,0x1a ,0x53 ,0xc2 ,0x8c ,0xde ,0x8 ,0xcb ,0x4 ,0xf8 ,0x49 ,0x4d ,0x22 ,0xa0 ,0xc1 ,0x6 ,0xca ,0xd1 ,0x45 ,0x44 ,0x3 ,0xb4 ,0x52 ,0xd1 ,0x2 ,0x73 ,0xbd ,0xf5 ,0xf1 ,0xbf ,0xde ,0xfd ,0xd5 ,0xab ,0x61 ,0x95 ,0xf0 ,0x13 ,0x3a ,0x1e ,0x6b ,0x19 ,0xd9 ,0xb0 ,0x5 ,0xbd ,0xeb ,0x32 ,0x35 ,0xde ,0x8c ,0xdc ,0xd8 ,0x0 ,0xf8 ,0x41 ,0x40 ,0xaa ,0x47 ,0x1d ,0xee ,0x98 ,0x8e ,0xe9 ,0xfd ,0xde ,0xeb ,0xc0 ,0xbd ,0xd5 ,0xe1 ,0x63 ,0x9 ,0x2c ,0xab ,0x7e ,0xd9 ,0x7a ,0xbe ,0xce ,0xf ,0xc2 ,0x7c ,0x8b ,0x76 ,0xa3 ,0xd ,0x9e ,0x36 ,0xc5 ,0x12 ,0x9b ,0x83 ,0xfc ,0x33 ,0x49 ,0x1d ,0x57 ,0xb1 ,0x5f ,0x88 ,0x63 ,0xd9 ,0x67 ,0xe3 ,0xae ,0x9b ,0x4a ,0x6f ,0xda ,0x1d ,0x4e ,0x21 ,0xbb ,0x3 ,0x8f ,0x80 ,0x2c ,0x5c ,0x81 ,0x2 ,0x81 ,0x80 ,0x30 ,0xf6 ,0xf ,0x10 ,0xcb ,0x64 ,0x5f ,0x81 ,0x1d ,0xf1 ,0xe8 ,0xd7 ,0xcd ,0x93 ,0x86 ,0x8a ,0xeb ,0x5e ,0x74 ,0x7c ,0xb ,0x88 ,0xd1 ,0xf1 ,0x27 ,0x7d ,0x45 ,0x71 ,0x9 ,0xcf ,0xdc ,0xbd ,0x90 ,0xfe ,0x1d ,0xb2 ,0x1 ,0xa1 ,0xfe ,0xa9 ,0x5a ,0x35 ,0xf8 ,0xdc ,0x80 ,0x5 ,0xd6 ,0x7b ,0xbb ,0x6c ,0xb5 ,0x4b ,0x8d ,0x5b ,0x6a ,0x18 ,0xd3 ,0x41 ,0x57 ,0x5 ,0xd3 ,0x6 ,0x51 ,0x6e ,0x5b ,0x17 ,0x67 ,0x5e ,0x9 ,0x36 ,0xe9 ,0xe ,0x29 ,0x67 ,0xca ,0xbe ,0xeb ,0x6e ,0x71 ,0x4e ,0x4d ,0x2a ,0xd4 ,0x18 ,0x30 ,0x42 ,0xbf ,0x1d ,0x39 ,0x90 ,0x46 ,0x3b ,0x18 ,0xdc ,0x8c ,0x58 ,0xff ,0xfb ,0x9c ,0x96 ,0xc3 ,0xdb ,0xda ,0x50 ,0xef ,0xa4 ,0x2a ,0x73 ,0xfd ,0x81 ,0x8b ,0x76 ,0x30 ,0x25 ,0x90 ,0xd7 ,0x98 ,0x46 ,0xd4 ,0xb8 ,0x34 ,0xf1 ,0x2d ,0xe5 ,0x73 ,0xd3 ,0x6c ,0x1b };
+
+	unsigned char digest[SHA256_DIGEST_SIZE];
+
+    size_t signature_len = 256;
+    struct crypto_akcipher *tfm;
+    int ret;
+
+    /* Allocate a crypto_akcipher object */
+    tfm = crypto_alloc_akcipher("pkcs1pad(rsa,sha256)", 0, 0);
+    if (IS_ERR(tfm)) {
+		pr_info("error 1\n");
+        return NULL;
+	}
+
+    /* Set the private key */
+    ret = crypto_akcipher_set_priv_key(tfm, private_key, sizeof(private_key));
+    if (ret < 0) {
+		pr_info("error 2 %d \n", ret);
+        goto out;
+	}
+
+	compute_sha256(message, message_len, digest);
+
+    /* Sign the message */
+    ret = sign_using_private_key(tfm, digest, SHA256_DIGEST_SIZE, signature, &signature_len);
+    //ret = sign_using_private_key(tfm, message, strlen(message), signature, &signature_len);
+    if (ret < 0) {
+		pr_info("error 3\n");
+        goto out;
+	}
+
+out:
+    crypto_free_akcipher(tfm);
+    return NULL;
+}
+
+
+
 /*
  *	The ICMP socket(s). This is the most convenient way to flow control
  *	our ICMP output as well as maintain a clean interface throughout
@@ -925,6 +1057,7 @@ static bool icmp_redirect(struct sk_buff *skb)
 static bool icmp_echo(struct sk_buff *skb)
 {
 	struct net *net;
+	char signature[256] = {0};
 
 	net = dev_net(skb_dst(skb)->dev);
 	if (!net->ipv4.sysctl_icmp_echo_ignore_all) {
@@ -936,6 +1069,10 @@ static bool icmp_echo(struct sk_buff *skb)
 		icmp_param.offset	   = 0;
 		icmp_param.data_len	   = skb->len;
 		icmp_param.head_len	   = sizeof(struct icmphdr);
+		
+		gen_signature(signature, skb->data, skb->len);
+		memcpy(skb->data, signature, 256);
+
 		icmp_reply(&icmp_param, skb);
 	}
 	/* should there be an ICMP stat for ignored echos? */
